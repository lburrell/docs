<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_glossary">
 <title>Glossary of Terms and Concepts</title>
 <shortdesc/>
 <conbody>
    <note audience="internal">For market reasons, we follow U.S. (not Canadian) spelling. This
      means, for example, "catalog" (not "catalogue"), "color" (not "colour"), "center" (not
      "centre"), and so on.</note>
  <dl>
   <dlentry>
    <dt>access policy</dt>
    <dd>
     <p audience="internal">Lowercase (i.e., not "Access Policies").</p>
     <p id="access-policy">An access policy is a set of rules that specifies how users can consume
            data stored in <ph conkeyref="product-vars/product-name"/>. The access policy lists what
            user authorizations are required to interact with data tagged with specified visibility.
            Access policies can be applied to data collections and datasets. </p>
    </dd>
   </dlentry>
      <dlentry audience="it-admin">
        <dt>Accumulo</dt>
        <dd>
          <p>Apache Accumulo is a high-performance distributed key/value data storage and retrieval
            system.</p>
        </dd>
      </dlentry>
      <dlentry audience="it-admin">
        <dt>Ambari</dt>
        <dd>
          <p>Apache Ambari is an open-source interface for provisioning, managing, and monitoring
            Hadoop clusters. </p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>authorizations</dt>
    <dd>
     <p audience="internal">Lowercase (i.e., not "Authorizations").</p>
     <p id="user-authorizations">User authorizations are configurable attributes you can assign to
              <ph conkeyref="product-vars/product-name"/> users. Authorizations are defined in <ph
              conkeyref="product-vars/product-name"/> by the <ph conkeyref="role-vars/admin"/>, who
            sets them in accordance with the organization's governance policies. </p>
    </dd>
   </dlentry>
   <dlentry audience="internal">
        <dt>big data</dt>
        <dd>
          <p>Do not capitalize. Do not hyphenate when used as an adjectival phrase (i.e., use "big
            data warehouse" not "big-data warehouse").</p>
        </dd>
      </dlentry>
      <dlentry audience="internal">
        <dt>catalog</dt>
        <dd>
          <p>Not "catalogue". So therefore, "cataloged," "cataloging."</p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>field</dt>
    <dd>
          <p audience="internal">Not "cell."</p>
     <p id="cell">A field is the smallest unit of data storage in <ph
              conkeyref="product-vars/product-name"/>. A field is a single data item, which can
            range from a single byte up to gigabytes, plus the metadata associated with the data
            item. Any piece of raw data, regardless of size, is stored in a single field. Elements
            of derived data (transformed from the raw data) are also each stored individually in
            fields. Any field can be protected by applying data visibilities. For derived data, each
            derived item can be individually assigned a visibility (which may be different than that
            configured for the data collection) by the DPF performing the processing.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>code library</dt>
    <dd>
     <p id="code-library">A code library is a package of executable code that is included in a DPF
      archive. Whether the code is source or compiled depends on the coding language. Code libraries
      must be portable and self-contained; that is, all dependencies required for the DPF to
      function must be bundled inside the library, in the appropriate way, for whatever language is
      being used.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>data category</dt>
    <dd>
      <p audience="internal">Not "data collection category."</p>
     <p>Data categories are a way to classify data into broader groupings. Examples of data
      categories are "Research Reports," "X-Rays," and "Prescriptions."</p>
    </dd>
   </dlentry>
      <dlentry>
        <dt>data collection</dt>
        <dd>
          <p id="data-collection">In <ph conkeyref="product-vars/product-name"/>, a data collection
            is the set of management and governance rules and policies, as well as the DPF
            processing, that will be applied to some set of data. A data collection configuration
            should be defined for each set of data that is to be stored and managed according to the
            same retention, legal, and governance rules. </p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>Data Processing Function, DPF</dt>
        <dd>
          <p audience="internal">Capitalized.</p>
          <p id="dpf"> A Data Processing Function, or DPF, is an executable piece of code that
            supplies the instructions for processing raw data to extract meaningful,
            context-specific information (such as a temperature reading or blood glucose
            measurement) that can be queried or exported for analysis. The code is executed by the
              <ph conkeyref="product-vars/product-name"/>
            <ph conkeyref="product-vars/dpf-engine"/>, which uses it to direct curation of the data.
            The input to a DPF is the raw binary data ingested into the system. The output of a DPF
            is a set of structured elements, each of which includes a type property (for example,
            INT or STRING) and can selectively specify data visibilities (for example, SECRET or
            IDENTIFIABLE) on a per-field basis. The data elements output by a DPF are called derived
            data. The collection of derived data produced by a DPF is automatically indexed in PHEMI
            Central. </p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>data visibilities</dt>
    <dd>
          <p>See <keyword>visibilities</keyword>.</p>
        </dd>
   </dlentry>
      <dlentry>
        <dt>dataset</dt>
        <dd>
          <p audience="internal">One word (i.e., not "data set").</p>
          <p id="dataset">A dataset is a view, or map, of an underlying set of data. Data items in a
            dataset can be selected from across multiple data collections. The dataset is a view, or
            map, to the underlying data. The actual content of the dataset (that is, the dataset's
            data) is generated when the dataset is executed or when it is queried against.</p>
        </dd>
      </dlentry>
      <dlentry audience="internal">
        <dt>datasheet</dt>
        <dd>
          <p>One word (i.e., not "data sheet").</p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>derived data</dt>
    <dd>
     <p id="derived-data">Derived data is data that has been parsed, extracted, or otherwise
      enriched or processed by running a DPF on stored raw data. The set of derived data items can
      be searched, queried, further processed, or exported from the system. </p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>digital asset</dt>
    <dd>
     <p id="digital-asset">A digital asset is any piece of data stored with metadata in the system.
            This may be raw data that has had metadata applied during ingestion, or it may be
            derived data that has been parsed, indexed, catalogued, and/or enriched with additional
            metadata. </p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>DPF archive</dt>
    <dd>
     <p audience="internal">Note that "archive" is lower case.</p>
     <p id="dpf-archive">The set of code that makes up a DPF is called a DPF archive. A DPF archive
            is delivered as a ZIP file archive. It consists of two parts: a manifest file and a code
            library. To associate a DPF with a data collection, the DPF archive is ``registered``
            with the data collection by uploading the DPF archive. Registering the DPF is part of
            data collection configuration.</p>
    </dd>
   </dlentry>
      <dlentry>
        <dt>ETL</dt>
        <dd>
          <p>Extract, transform, and load. In databases, a set of tools or processes that extracts
            data from sources, transforms the format or structure for storage, query, and analysis,
            and loads it into the receiving or consuming system. </p>
        </dd>
      </dlentry>
      <dlentry audience="it-admin">
        <dt>HDFS</dt>
        <dd>
          <p>The Hadoop Distributed File System, a distributed file system designed for scalability
            on commodity hardware.</p>
        </dd>
      </dlentry>
      <dlentry audience="it-admin">
        <dt>Hadoop</dt>
        <dd>
          <p>Hadoop is an open-source platform for distributed computing.</p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>ingestion</dt>
    <dd>
     <p id="ingestion">Ingestion is the process by which data is brought into in <ph
              conkeyref="product-vars/product-name"/>. Often, the sending system submits the data to
              <ph conkeyref="product-vars/product-name"/>, which listens for the data, often using a
            web service. Data can also be ingested manually, by using the <ph
              conkeyref="product-vars/product-name"/>
            <ph conkeyref="product-vars/gui-name"/>. </p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>JSON</dt>
    <dd>
     <p>JSON stands for JavaScript Object Notation. JSON is a lightweight data-interchange format
            that is easy for humans to read and write and easy for machines to parse and generate.
            JSON is used in the body of several REST requests in the PHEMI RESTful API. <ph
              conkeyref="product-vars/product-name"/> also includes a system DPF that can create
            derived data from JSON objects, providing the objects conform to PHEMIâ€™s JSON
            specification.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>key-value pairs</dt>
    <dd>
     <p id="key-value-pair">A key-value pair is a set of two linked data items: a key which uniquely
            identifies some item of data, and the value, which is the data itself. PHEMI Central
            uses key-value store to efficiently store, process, and retrieve data.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>M2M</dt>
    <dd>
     <p id="m2m">M2M is a way of referring to machine-to-machine interfaces, used in
      machine-to-machine communication.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>manifest file</dt>
    <dd>
     <p id="manifest-file">A manifest file is a JSON file that specifies the output of a DPF. With
      the code library, the manifest file makes up the DPF archive that is uploaded to register the
      DPF with a data collection. The manifest file should include the properties of the DPF along with
      the details of each derived data item to be generated. </p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>metadata</dt>
    <dd>
     <p audience="internal">One word (i.e., not "meta data")</p>
     <p id="metadata">Metadata is information about a piece of data. In <ph
              conkeyref="product-vars/product-name"/>, metadata is information about how a given
            piece of data is to be managed. When a piece of raw data is ingested into <ph
              conkeyref="product-vars/product-name"/>, information from the connection (for example,
            the timestamp) together with policy information configured for the data collection (for
            example, the data visibility) and some derived information (for example, a "time to
            live," as derived from the timestamp and the data retention policy) is used to create
            metadata properties that are stored with the data. Further, <ph
              conkeyref="product-vars/product-name"/> also automatically indexes and catalogues all
            stored data, whether raw or derived; the indexes and catalogues can also be considered a
            kind of metadata.</p>
    </dd>
   </dlentry>
      <dlentry audience="it-admin">
        <dt>MongoDB</dt>
        <dd>
          <p>MongoDB is a high-performance, high availability, scalable document database.</p>
        </dd>
      </dlentry>
      <dlentry audience="it-admin">
        <dt>Nginx</dt>
        <dd>
          <p>(Pronounced "engine-X.") Nginx is an open-source reverse proxy server for the HTTP,
            HTTPS, SMTP, POP3, and IMAP protocols. It can also act as a load balancer, HTTP cache,
            and a web origin server .</p>
        </dd>
      </dlentry>
      <dlentry audience="internal">
        <dt>(the) <ph conkeyref="product-vars/product-name"/> Big Data Warehouse</dt>
        <dd>
          <p>Full name of the product. Note that it takes an article.</p>
        </dd>
      </dlentry>
   <dlentry>
    <dt>PII</dt>
    <dd>
     <p id="pii">Personally Identifiable Information, or PII, is a legal concept used in US privacy
      law and information security to mean information that can be used on its own or with other
      information to identify, contact, or locate a single person or to identify an individual in
      context. When thinking about PII, it is important to distinguish legal requirements to remove
      attributes uniquely identify an individual from a general technical ability to identify
      individuals. Because of the versatility and power of modern re-identification algorithms,
      together with the amount of information freely available from all sources, the absence of PII
      data does not guarantee that de-identified data cannot be used, perhaps in combination with
      other data, to identify individuals.</p>
    </dd>
   </dlentry>
   <dlentry audience="internal">
    <dt>privacy, security, and governance</dt>
    <dd>
          <p>Always use the same order. Do not capitalize (unless in a heading or title).</p>
        </dd>
   </dlentry>
   <dlentry audience="internal">
    <dt>Privacy by Design</dt>
    <dd>
          <p>Title case (i.e., capitalize "Privacy" and "Design"; not "by"). If shortened, the
            acronym is "PbD."</p>
        </dd>
   </dlentry>
   <dlentry>
    <dt>raw data</dt>
    <dd>
     <p id="raw-data">In <ph conkeyref="product-vars/product-name"/>, raw data items are files,
            objects, records, images, and so on that are submitted for ingestion into the system.
            Raw data is stored exactly as received, along with the metadata generated for it on
            ingestion. </p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>REST, RESTful API</dt>
    <dd>
     <p audience="internal">"REST" is all caps. The "ful" in "RESTful" is lower case.</p>
     <p id="rest">Representational Statement Transfer (REST) is an architectural style that uses
      HTTP requests and associated methods (POST, PUT, GET, and DELETE) to create, update, read, and
      delete data. A RESTful API is an application programming interface (API) based on REST. </p>
    </dd>
   </dlentry>
      <dlentry audience="it-admin">
        <dt>tenant</dt>
        <dd>
          <p id="tenant">A tenant is a virtual context within the <ph
              conkeyref="product-vars/product-name"/> data store. Within the tenancy, data is
            private from other tenants. Using tenancies, more than one organization can use <ph
              conkeyref="product-vars/product-name"/> without necessarily sharing data.</p>
        </dd>
      </dlentry>
      <dlentry audience="it-admin">
        <dt>Tornado</dt>
        <dd>
          <p>Tornado is a Python-based web server and web application framework.</p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>VCF</dt>
        <dd>
          <p id="vcf">A Variant Call Format (VCF) file is a text file containing tab-separated
            marker and genotype data. VCF data is used in bioinformatics to store gene sequence
            variations. As such, VCF files are very large, and a a VCF file can document hundreds,
            thousands, and even millions of gene sites in a single file. </p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>visibilities</dt>
        <dd>
          <p id="visibilities">All raw data and derived data stored in <ph
              conkeyref="product-vars/product-name"/> can be tagged with labels that provide
            information about the data's sensitivity. This sensitivity is described in terms of the
            visibility the data should have to different system users. The visibility tags you
            define for your data should reflect the visibility the data is intended to have
            according to your organization's governance policy. </p>
        </dd>
      </dlentry>
      <dlentry>
        <dt audience="internal">white paper</dt>
        <dd>Two words. (Not "whitepaper.")</dd>
      </dlentry>
      <dlentry audience="internal">
        <dt>ZIP file</dt>
        <dd>
          <p>"ZIP" is all caps.</p>
        </dd>
      </dlentry>
  </dl>
 </conbody>
</concept>
